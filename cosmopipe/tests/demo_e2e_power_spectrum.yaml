# This an end-to-end analysis example in Fourier space:
# - setup fiducial cosmology
# - run power spectrum estimation of the input box (periodic) catalog
# - plot power spectrum
# - apply cuts to the data vector
# - setup template cosmology
# - compute Gaussian covariance matrix
# - fit measured power spectrum with Kaiser model
# - plot fitted model v.s. measured power spectrum
# with geometry effects: wide-angle and window function (not accounted for in the covariance matrix)
# WARNING: requires running prepare_e2e.py first (sets input catalogs)


data_dir: _data
samples_dir: _samples
plots_dir: _plots
catalog_dir: _catalog

main:
  #$execute: [fiducial, window] # we do this in first step, though we could just do things in a row
  #$execute: [fiducial, window, survey_estimator, data_plotting, data, primordial, model, mockcov, fitting, postprocessing]
  $execute: [powerspectrum_measurement, fitting, postprocessing]
  #$execute: [data, primordial, model, mockcov, fitting, postprocessing]
  $[survey_selection.zeff]: 1.0

powerspectrum_measurement:
  $module_name: pypescript
  $module_class: StreamPipeline
  $execute: [fiducial, window, survey_estimator, data_plotting, data, primordial, model, mockcov]

fitting:
  $module_name: pypescript
  $module_class: BasePipeline
  $modules: [minuit, plotting]
  $[likelihood]: $[likelihood]

postprocessing:
  $module_name: cosmopipe.pipelines.postprocessing
  $module_class: ProfilesPostprocessing
  #$execute: ${like.$modules}
  #$modules: [data_model_plotting]
  $setup: [model]
  $execute: [model, projection, data_model_plotting]

minuit:
  $module_name: cosmopipe.samplers.profiler.minuit
  $module_class: MinuitProfiler
  $modules: [like]
  migrad:
    n_iterations: 1

fiducial:
  $module_name: cosmopipe.theory.primordial.fiducial
  engine: class

primordial:
  $module_name: cosmopipe.theory.primordial.primordial
  engine: class
  compute: pk_m

survey_estimator:
  $module_name: cosmopipe.estimators.power_spectrum.nbodykit_survey
  Nmesh: 128
  BoxSize: 4000.
  edges:
    step: 0.01
  nbar: NZ
  data_load: f'${catalog_dir}/lognormal_data.fits'
  randoms_load: f'${catalog_dir}/lognormal_randoms.fits'
  save: f'${data_dir}/lognormal_power_spectrum.txt'
  #use_existing: True

box_estimator:
  $module_name: cosmopipe.estimators.power_spectrum.nbodykit_box
  Nmesh: 128
  BoxSize: 1380.
  edges:
    step: 0.01
  position: 'Position + VelocityOffset[:,[0]]*[1,0,0]'
  data_load: f'${catalog_dir}/lognormal_box.fits'

data_plotting:
  $module_name: cosmopipe.data_vector.plotting
  $module_class: DataVectorPlotting
  style: power
  kwplt: {'alpha': 0.3}
  filename: f'${plots_dir}/power_spectrum.png'

mockcov:
  $module_name: cosmopipe.theory.galaxy_clustering.gaussian_covariance
  volume: e'1380.**3'
  data_load: True
  #xlim: ${data.xlim}

data:
  $module_name: cosmopipe.data_vector.data_vector
  xlim: {'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.3], 'ell_4': [0.02, 0.2]}
  #xlim: {'ell_0': [0.,100.], 'ell_2': [0.,100.], 'ell_4': [0.,100.]}
  #xlim: [[0.,0.],[0.,0.],[0.,0.],[0.02, 0.3],[0.02, 0.3],[0.02, 0.3]]
  #xlim: {'mu_0_1/3':[0.02, 0.3],'mu_1/3_2/3':[0.02, 0.3],'mu_2/3_1':[0.02, 0.3]}

plotting:
  $module_name: cosmopipe.samplers.plotting
  $module_class: ProfilesPlotting
  save_stats: f'${plots_dir}/stats_linear.tex'
  toplot:
    - plot_aligned_stacked:
        truths: value
        filename: f'${plots_dir}/aligned_stacked_linear.png'

like:
  $module_name: cosmopipe.likelihood.likelihood
  $module_class: GaussianLikelihood
  $modules: [model, projection]

model:
  $module_name: cosmopipe.theory.galaxy_clustering.linear_model
  FoG: gaussian

data_model_plotting:
  $module_name: cosmopipe.theory.plotting
  data_load: True
  covariance_load: True
  xmodel:
    nbins: 100
  style: power
  filename: f'${plots_dir}/e2e_power_spectrum_data_model.png'

projection:
  $module_name: cosmopipe.survey_selection.projection
  $modules: [wideangle, convolution]
  #$modules: []

wideangle:
  $module_name: cosmopipe.survey_selection.wide_angle
  d: 1.0

convolution:
  $module_name: cosmopipe.survey_selection.window_convolution
  default_zero: True

window:
  $module_name: cosmopipe.estimators.window_function.fft_window_function
  $modules: [window_estimator]
  nbar: NZ
  data_load: ${survey_estimator.data_load}
  randoms_load: ${survey_estimator.randoms_load}
  swin: e'np.linspace(0.,5000,1000)'
  wa_orders: [0,1]
  ells: [[0,2,4],[1,3]]
  save: f'${data_dir}/window_function.txt'
  #use_existing: True

window_estimator:
  $module_name: cosmopipe.estimators.power_spectrum.nbodykit_survey
  Nmesh: 256
  BoxSize: 10000.
