data_dir: _data
samples_dir: _samples
plots_dir: _plots

main:
  $execute: [params, primordial, model, mockcov, mockdata, compare]

compare:
  $module_name: pypescript
  $module_class: BasePipeline
  #$modules: [emcee, zeus, dynesty, cobaya, plotting]
  $modules: [emcee, zeus, plotting]
  #$modules: [plotting]

one:
  $module_name: cosmopipe.samplers.one
  $module_class: OneSampler
  $modules: [like]

emcee:
  $module_name: cosmopipe.samplers.ensemble.emcee
  $module_class: EmceeSampler
  $modules: [like]
  eigen_gr_stop: 0.5
  save: f'${samples_dir}/samples_emcee.txt'
  $[likelihood.samples_emcee]: $[likelihood.samples]

zeus:
  $module_name: cosmopipe.samplers.ensemble.zeus
  $module_class: ZeusSampler
  $modules: [like]
  eigen_gr_stop: 0.5
  save: f'${samples_dir}/samples_zeus.txt'
  $[likelihood.samples_zeus]: $[likelihood.samples]

dynesty:
  $module_name: cosmopipe.samplers.nested.dynesty
  $module_class: DynestySampler
  $modules: [like]
  save: f'${samples_dir}/samples_dynesty.txt'
  $[likelihood.samples_dynesty]: $[likelihood.samples]

cobaya:
  $module_name: cosmopipe.samplers.cobaya.sampler
  $module_class: CobayaSampler
  $modules: [like]
  sampler:
    mcmc:
      max_tries: 10000
      Rminus1_stop: 0.01
      Rminus1_cl_stop: 0.07
  save: f'${samples_dir}/samples_cobaya.txt'
  $[likelihood.samples_cobaya]: $[likelihood.samples]

minuit:
  $module_name: cosmopipe.samplers.profiler.minuit
  $module_class: MinuitProfiler
  $modules: [like]
  torun: [migrad]
  save: f'${samples_dir}/minuit.npy'

params:
  $module_name: cosmopipe.parameters.parameterisation
  common_parameters:
    ${cosmological_parameters.yaml:}:
    ${linear_parameters.yaml:}:
    survey_geometry:
      zeff:
        value: 1.0
        fixed: True

primordial:
  $module_name: cosmopipe.theory.primordial
  engine: eisenstein_hu
  compute: pk_m

mockcov:
  $module_name: cosmopipe.theory.gaussian_covariance
  $module_class: GaussianPkCovariance
  kedges:
    min: 0.02
    max: 0.3
    step: 0.01
  shotnoise: 1e3
  volume: 1e10
  projs: [ell_0, ell_2, ell_4]
  use_data_xlim: mockdata
  xlim: $&{mockdata.xlim}

mockdata:
  $module_name: cosmopipe.data.mock_data_vector
  mean: False
  seed: 42
  xlim: {'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.3], 'ell_4': [0.02, 0.2]}
  save: f'${data_dir}/data.txt'

plotting:
  $module_name: cosmopipe.samplers.plotting
  $module_class: SamplesPlotting
  samples_load: [samples_emcee, samples_zeus]
  labels: [emcee, zeus]
  burnin: 0.3
  toplot:
    - plot_1d:
        parameter: galaxy_bias.b1
        truth: value
        filename: f'${plots_dir}/plot_b1.png'
    - plot_corner:
        parameters: [galaxy_bias.b1, galaxy_bias.sigmav, galaxy_bias.As]
        truths: value
        filename: f'${plots_dir}/corner.png'
#    - plot_gelman_rubin:
#        filename: _plots/gelman_rubin.png

like:
  $module_name: cosmopipe.likelihood.likelihood
  $module_class: GaussianLikelihood
  $modules: [model, projection]

model:
  $module_name: cosmopipe.theory.linear_model
  FoG: gaussian

projection:
  $module_name: cosmopipe.theory.projection
  $module_class: DataVectorProjection
