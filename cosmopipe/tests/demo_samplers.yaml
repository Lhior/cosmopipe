# This pipeline is similar demo_linear.yaml, bust instead of likelihood maximisation,
# we run MCMC with different samplers (emcee, zeus) and plot the resulting contours.

data_dir: _data
samples_dir: _samples
plots_dir: _plots

main:
  $execute: [primordial, model, xdata, mockcov, projection, mockdata, fitting]
  #$execute: [primordial, model, mockcov, mockdata]
  $[survey_selection.zeff]: 1.0

fitting:
  $module_name: pypescript
  $module_class: BasePipeline
  #$modules: [emcee, zeus, dynesty, cobaya, plotting]
  $execute: [emcee, zeus, plotting]
  #$modules: [plotting]

one:
  $module_name: cosmopipe.samplers.evaluate
  $module_class: EvaluateSampler
  $modules: [like]

emcee:
  $module_name: cosmopipe.samplers.ensemble.emcee
  $module_class: EmceeSampler
  $modules: [like]
  eigen_gr_stop: 0.5
  save: f'${samples_dir}/samples_emcee.txt'
  $[likelihood.samples_emcee]: $[likelihood.samples]

zeus:
  $module_name: cosmopipe.samplers.ensemble.zeus
  $module_class: ZeusSampler
  $modules: [like]
  eigen_gr_stop: 0.5
  save: f'${samples_dir}/samples_zeus.txt'
  $[likelihood.samples_zeus]: $[likelihood.samples]

dynesty:
  $module_name: cosmopipe.samplers.nested.dynesty
  $module_class: DynestySampler
  $modules: [like]
  save: f'${samples_dir}/samples_dynesty.txt'
  $[likelihood.samples_dynesty]: $[likelihood.samples]

cobaya:
  $module_name: cosmopipe.samplers.cobaya.sampler
  $module_class: CobayaSampler
  $modules: [like]
  sampler:
    mcmc:
      max_tries: 10000
      Rminus1_stop: 0.01
      Rminus1_cl_stop: 0.07
  save: f'${samples_dir}/samples_cobaya.txt'
  $[likelihood.samples_cobaya]: $[likelihood.samples]

minuit:
  $module_name: cosmopipe.samplers.profiler.minuit
  $module_class: MinuitProfiler
  $modules: [like]
  torun: [migrad]
  save: f'${samples_dir}/minuit.npy'

primordial:
  $module_name: cosmopipe.theory.primordial.primordial
  engine: eisenstein_hu
  compute: pk_m

xdata:
  $module_name: cosmopipe.data_vector.synthetic_data_vector
  edges:
    min: 0.02
    max: 0.3
    step: 0.01
  projs: e'[{'space':'power','mode':'multipole','proj':ell} for ell in [0,2,4]]'
  xlim: $&{mockdata.xlim}

mockcov:
  $module_name: cosmopipe.theory.galaxy_clustering.gaussian_covariance
  $module_class: GaussianCovariance
  volume: 1e10

mockdata:
  $module_name: cosmopipe.data_vector.mock_data_vector
  mean: True
  mean_load: True
  seed: 42
  xlim: {'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.3], 'ell_4': [0.02, 0.2]}
  save: f'${data_dir}/data.txt'

plotting:
  $module_name: cosmopipe.samplers.plotting
  $module_class: SamplesPlotting
  samples_load: [samples_emcee, samples_zeus]
  labels: [emcee, zeus]
  burnin: 0.3
  toplot:
    - plot_1d:
        parameter: galaxy_bias.b1
        truth: value
        filename: f'${plots_dir}/plot_b1.png'
    - plot_corner:
        parameters: [galaxy_bias.b1, galaxy_bias.sigmav, galaxy_bias.As]
        truths: value
        filename: f'${plots_dir}/corner.png'
#    - plot_gelman_rubin:
#        filename: _plots/gelman_rubin.png

like:
  $module_name: cosmopipe.likelihood.likelihood
  $module_class: GaussianLikelihood
  $modules: [model, projection]

model:
  $module_name: cosmopipe.theory.galaxy_clustering.linear_model
  FoG: gaussian
  data_shotnoise: 1e3

projection:
  $module_name: cosmopipe.survey_selection.projection
