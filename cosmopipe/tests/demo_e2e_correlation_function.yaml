# This an end-to-end analysis example in configuration space:
# - setup fiducial cosmology
# - run correlation function estimation of the input skycut catalog
# - plot correlation function
# - apply cuts to the data vector
# - setup template cosmology
# - compute Gaussian covariance matrix
# - fit measured correlation function with Kaiser model
# WARNING: to run quickly we just estimate the correlation function at small s, and thus do no expect a good fit
# WARNING: requires running prepare_e2e.py first (sets input catalogs)

data_dir: _data
samples_dir: _samples
plots_dir: _plots
catalog_dir: _catalog

main:
  #$execute: [fiducial, survey_estimator, data_plotting, data, params, primordial, model, mockcov, fitting]
  $execute: [data, params, primordial, model, hankel, mockcov, fitting]
  $[survey_selection.zeff]: 1.0

fitting:
  $module_name: pypescript
  $module_class: BasePipeline
  $modules: [minuit, plotting]

minuit:
  $module_name: cosmopipe.samplers.profiler.minuit
  $module_class: MinuitProfiler
  $modules: [like]
  migrad:
    n_iterations: 10

params:
  $module_name: cosmopipe.parameters.parameterization
  base_parameters:
    galaxy_rsd.fsig:
      value: 0.5
      fixed: False
      prior:
        dist: uniform
        limits: [0.2, 0.8]
      latex: 'f\sigma_{8}'

fiducial:
  $module_name: cosmopipe.theory.primordial.fiducial
  engine: class

primordial:
  $module_name: cosmopipe.theory.primordial.primordial
  engine: class
  compute: pk_m

survey_estimator:
  $module_name: cosmopipe.estimators.correlation_function.nbodykit_survey
  nbar: NZ
  data_load: f'${catalog_dir}/lognormal_data.fits'
  randoms_load: f'${catalog_dir}/lognormal_randoms.fits'
  save: f'${data_dir}/lognormal_correlation_function.txt'
  edges:
    min: 1e-9
    max: 20
    nbins: 10

box_estimator:
  $module_name: cosmopipe.estimators.correlation_function.nbodykit_box
  BoxSize: 1380.
  position: 'Position + VelocityOffset[:,[0]]*[1,0,0]'
  data_load: f'${catalog_dir}/lognormal_box.fits'
  save: f'${data_dir}/lognormal_correlation_function.txt'
  edges:
    min: 1e-9
    max: 20
    nbins: 10

data_plotting:
  $module_name: cosmopipe.data_vector.plotting
  $module_class: DataVectorPlotting
  data_load: ${survey_estimator.save}
  style: correlation
  projs: ['ell_0','ell_2','ell_4']
  kwplt: {'alpha': 0.3}
  filename: f'${plots_dir}/correlation_function.png'

mockcov:
  $module_name: cosmopipe.theory.galaxy_clustering.gaussian_covariance
  volume: e'1380.**3'
  data_load: True
  #xlim: ${data.xlim}

data:
  $module_name: cosmopipe.data_vector.data_vector
  #data_load: ${survey_estimator.save}
  data_load: ${box_estimator.save}
  #xlim: {'ell_0': [10., 150.], 'ell_2': [10., 150.], 'ell_4': [10., 150.]}
  #xlim: {'mu_0_1/3': [10., 150.], 'mu_1/3_2/3': [10., 150.], 'mu_2/3_1': [10., 150.]}
  xlim: {'mu_0_1/3': [10., 150.], 'mu_1/3_2/3': [10., 150.]}

plotting:
  $module_name: cosmopipe.samplers.plotting
  $module_class: ProfilesPlotting
  save_stats: f'${plots_dir}/stats_linear.tex'
  toplot:
    - plot_aligned_stacked:
        truths: value
        filename: f'${plots_dir}/aligned_stacked_linear.png'

like:
  $module_name: cosmopipe.likelihood.likelihood
  $module_class: GaussianLikelihood
  $modules: [model, hankel, projection]

model:
  $module_name: cosmopipe.theory.galaxy_clustering.linear_model
  FoG: gaussian
  data_shotnoise: 1e3
  update_parameters:
    galaxy_bias.As:
      value: 0.
      fixed: True

hankel:
  $module_name: cosmopipe.theory.projections.hankel_transform

projection:
  $module_name: cosmopipe.survey_selection.projection
