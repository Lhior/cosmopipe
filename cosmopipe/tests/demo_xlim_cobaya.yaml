main:
  execute: [params, primordial, mpi, plotting]
  #execute: [plotting]

mpi:
  module_name: pypescript
  module_class: BasePipeline
  iter: range(2)
  nprocs_per_task: 1
  execute: [cobaya]
  configblock_iter:
    mockdata.xlim: [{'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.2], 'ell_4': [0.02, 0.2]}, {'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.3], 'ell_4': [0.02, 0.2]}]
    mockdata.save_txt: "lambda i: '_data/data_{:d}.txt'.format(i)"
    cobaya.save_cosmomc: "lambda i: '_samples/samples_cobaya_{:d}'.format(i)"
  datablock_iter_key:
    likelihood.samples: "lambda i: 'likelihood.samples_cobaya_{:d}'.format(i)"

cobaya:
  module_name: cosmopipe.samplers.cobaya.sampler
  module_class: CobayaSampler
  modules: [like]
  sampler:
    mcmc:
      max_tries: 10000
      Rminus1_stop: 0.01
      Rminus1_cl_stop: 0.07
  save_cosmomc: '_samples/samples_cobaya'

params:
  module_name: cosmopipe.parameters.parameterisation
  common_parameters:
    configblock_load: [cosmological_parameters.yaml, linear_parameters.yaml]
    survey_geometry:
      zeff:
        value: 1.0
        fixed: True

primordial:
  module_name: cosmopipe.theory.primordial
  engine: eisenstein_hu
  compute: pk_m

mockcov:
  module_name: cosmopipe.theory.gaussian_covariance
  module_class: GaussianPkCovariance
  kedges:
    min: 0.02
    max: 0.3
    step: 0.01
  shotnoise: 1e3
  volume: 1e10
  projs: [ell_0, ell_2, ell_4]
  use_data_xlim: mockdata

mockdata:
  module_name: cosmopipe.data.mock_data_vector
  mean: False
  seed: 42
  xlim: {'ell_0': [0.02, 0.3], 'ell_2': [0.02, 0.3], 'ell_4': [0.02, 0.2]}
  save_txt: '_data/data.txt'

plotting:
  module_name: cosmopipe.samplers.plotting
  module_class: SamplesPlotting
  samples_keys: [samples_cobaya_0, samples_cobaya_1]
  #samples_keys: ['samples_cobaya_0']
  #samples_files: ['_samples/samples_cobaya_0.txt','_samples/samples_cobaya_1.txt']
  save_stats: [_plots/stats_0.tex, _plots/stats_1.tex]
  labels: ['$\ell = 2$, $k < 0.2 \; h/\mathrm{Mpc}$','$\ell = 2$, $k < 0.3 \; h/\mathrm{Mpc}$']
  burnin: 0.3
  toplot:
    - plot_1d:
        parameter: galaxy_bias.b1
        truth: value
        filename: _plots/plot_b1.png
    - plot_corner:
        parameters: [galaxy_bias.b1, galaxy_bias.sigmav, galaxy_bias.As]
        truths: value
        filename: _plots/corner.png
#    - plot_gelman_rubin:
#        filename: _plots/gelman_rubin.png

like:
  module_name: cosmopipe.likelihood.likelihood
  module_class: GaussianLikelihood
  setup: [model:execute, mockcov:execute, mockdata:execute, model, projection]
  execute: [model, projection]

model:
  module_name: cosmopipe.theory.linear_model
  FoG: gaussian

projection:
  module_name: cosmopipe.theory.projection
  module_class: DataVectorProjection
