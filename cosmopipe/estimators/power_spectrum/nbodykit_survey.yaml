name: SurveyPowerSpectrum
version: 0.0.1
date: 01/06/2021
author: Arnaud de Mattia
maintainer: Arnaud de Mattia
description: Estimate survey power spectrum using nbodykit
url: https://github.com/bccp/nbodykit
licence: GNUv3
bibtex: [arXiv:1712.05834v1, arXiv:1704.02357]
requirements: [nbodykit]

long description: >
                  Algorithm to compute power spectrum multipoles using FFTs
                  for a data survey with non-trivial geometry.
                  Due to the geometry, the estimator computes the true power spectrum
                  convolved with the window function (FFT of the geometry).
                  This estimator implemented in this class is described in detail in
                  Hand et al. 2017 (arXiv:1704.02357). It uses the spherical harmonic
                  addition theorem such that only :math:`2\ell+1` FFTs are required to
                  compute each multipole. This differs from the implementation in
                  Bianchi et al. and Scoccimarro et al., which requires
                  :math:`(\ell+1)(\ell+2)/2` FFTs.

options:
  Nmesh:
    type: [int, list]
    default: 512
    description: mesh size, i.e. number of mesh nodes along each axis
  BoxSize:
    type: [float, list]
    default: None
    description: box size, i.e. physical extent in :math:`\mathrm{Mpc}/h` of the cartesian box along each axis.
                If ``None``, the maximum Cartesian extent of the randoms is used.
  BoxPad:
    type: [float, list]
    default: 0.02
    description: optionally apply this additional (fractional) buffer to the maximum Cartesian extent of the randoms (in case ``BoxSize`` is ``None``)
  resampler:
    type: string
    default: tsc
    choices: [tsc, cic, pcs]
    description: name of the resampler to use when interpolating the particles to the mesh
  interlaced:
    type: bool
    default: True
    description: whether to use interlacing to reduce aliasing when painting the particles on the mesh
  dk:
    type: float
    default: 0.01
    description: the spacing in wavenumber (:math:`h/\mathrm{Mpc}`) to use; if not provided; the fundamental mode :math:`2 \pi / \mathrm{BoxSize}` of the box is used
  kmin:
    type: float
    default: 0
    description: the edge of the first wavenumber bin
  kmax:
    type: float
    default: None
    description: the edge of the last wavenumber bin. By default, set to the Nyquist frequency :math:`\pi \mathrm{Nmesh} / \mathrm{BoxSize}`
  muwedges:
    type: int
    default: 3
    description: :math:`\mu`-wedges to infer from multipole measurements
  ells:
    type: [list, tuple]
    default: (0,2,4)
    description: a list of integer multipole numbers :math:`\ell` to compute
  z:
    type: string
    default: Z
    description: redshift column in the input catalog(s)
  ra:
    type: string
    default: RA
    description: right ascension column (in degree) in the input catalog(s)
  dec:
    type: string
    default: DEC
    description: declination column (in degree) in the input catalog(s)
  position:
    type: string
    default: None
    description: position column (in :math:`\mathrm{Mpc}/h`) in the input catalog(s).
                If not provided, cartesian positions are computed from z, ra, dec and the input fiducial cosmology
  weight_comp:
    type: string
    default: None
    description: column of completeness weights in the input catalog(s); can be specified with operations on columns, e.g. WEIGHT_PHOTO * WEIGHT_NOZ.
                If ``None`` provided, defaults to 1
  nbar:
    type: [string, dict]
    default: NZ
    description: redshift density (in :math:`(h \ \mathrm{Mpc})^{3}`) in the input catalog(s), or a dictionary holding ``fsky`` the sky fraction
                and ``bins`` (either 'scott' to be defined according to Scott's rule, or an int for the the number of bins, or a list of edges).
  weight_fkp:
    type: string
    default: None
    description: column of FKP weights in the input catalog(s); if ``None``, defaults to :math:`1/(1 + \overline{n} P_{0})`
  P0_fkp:
    type: float
    default: 0
    description: reference power for FKP weights
  load_data:
    type: [string, list, tuple]
    default: data
    description: either (section, name) (or name only; default section is 'catalog') in data_block where to find the data catalog(s) or, if containing / (or \), a path to a catalog on disk
                  A tuple of list of two strings can be provided for cross-correlations.
  load_randoms:
    type: [string, list, tuple]
    default: randoms
    description: same as ``load_data``, for the randoms catalog(s)
  save:
    type: string
    default: None
    description: if not ``None``, path where to save the power spectrum measurement

execute input:
  fiducial_cosmology.cosmo:
    type: cosmoprimo.Cosmology
    description: fiducial cosmology, used if ``position`` or ``nbar`` are not provided

execute output:
  data.data_vector:
    type: cosmopipe.lib.data.DataVector
    description: power spectrum measurement
